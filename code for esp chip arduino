//I have borrowed from others but refined this project to use rfid cards to log attendance for a meeting into a google sheet.

// Some problems I encountered - I had trouble with asus router getting good connection to esp chip.  Router at my work would not send data to google sheet.  If you have trouble try different routers or use you mobile hot spot on your phone

// Make sure you add your google sheet ID and wife credentials below

//Riley Perrault

#ifdef ESP8266
#include <ESP8266WiFi.h>
#else
#include <WiFi.h>
#endif

#include <SPI.h>
#include <MFRC522.h>
#include <HTTPSRedirect.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

// Google Sheets API Info
const char* GScriptId = “put your google script id here inside the quotes";
String gate_number = "Gate1";

// Wi-Fi Credentials
const char* ssid = “your wifi inside quotes";
const char* password = “your wifi password inside quotes";

// Google Sheets setup
const char* host = "script.google.com";
const int httpsPort = 443;
String url = String("/macros/s/") + GScriptId + "/exec";
HTTPSRedirect* client = nullptr;

// RFID Setup
int blocks[] = { 4, 5, 6, 8, 9 };
#define total_blocks (sizeof(blocks) / sizeof(blocks[0]))
#define RST_PIN 0  // D3
#define SS_PIN 2   // D4
#define BUZZER 4   // D2

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
MFRC522::StatusCode status;
byte bufferLen = 18;
byte readBlockData[18];
String student_id;

void connectToWiFi() {
  Serial.print("\nConnecting to WiFi: ");
  Serial.print("Signal Strength (RSSI): ");
  Serial.println(WiFi.RSSI());
  Serial.println(ssid);

  WiFi.disconnect(true);  // Clear previous Wi-Fi settings
  delay(1000);
  WiFi.begin(ssid, password);

  //lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("WiFi Signal:");

  lcd.setCursor(0, 1);
  lcd.print(String(WiFi.RSSI()) + " dBm");


  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 40000) {  // 40-sec timeout
    Serial.print(".");
    lcd.setCursor(0, 1);
    lcd.print(ssid);
    delay(1000);
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi Connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    lcd.clear();
    // Get and print IP address
    String ipAddr = WiFi.localIP().toString();
    Serial.print("IP Address: ");
    Serial.println(ipAddr);
    // Display IP address on LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(ssid);
    lcd.setCursor(0, 1);
    lcd.print(ipAddr);
    delay(5000);  // Keep IP on screen for 5 seconds before clearing
  }
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nWiFi Failed. Retrying to 20");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("WiFi Failed.");
    lcd.setCursor(0, 1);
    lcd.print("Retrying to 5");
    WiFi.disconnect();
    delay(500);
    WiFi.begin(ssid, password);
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 3) {
      delay(15000);  // Wait 15 seconds before checking again
      Serial.print(".");
      attempts++;
      //lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("WIFI Count to 3");
      lcd.setCursor(0, 1);
      lcd.print(attempts);
      Serial.print(attempts);
      WiFi.reconnect();
    }

    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("\nStill failed, restarting...");
      ESP.restart();
    } else {
      Serial.println("\nReconnected!");
    }
  }
}
// Google Sheets Connection Function
bool connectToGoogle() {
  Serial.println("🔎 Connecting to Google Sheets...");

  if (client) {
    delete client;  // Free memory if previously allocated
  }

  client = new HTTPSRedirect(httpsPort);
  client->setInsecure();  // Bypass SSL for debugging (useful if SSL is the issue)
  client->setPrintResponseBody(true);  // Print server response
  client->setContentTypeHeader("application/json");

  for (int attempt = 1; attempt <= 5; attempt++) {
    Serial.print("Attempt "); Serial.print(attempt); Serial.println(" to connect...");

    if (client->connect(host, httpsPort)) {
      Serial.println("Connected to Google Sheets!");
      lcd.setCursor(0, 0); lcd.print("Connected!");
      return true;
    } else {
      Serial.println(" Connection failed.");
    }

    delay(2000);  // Wait before retry
  }

  lcd.clear(); lcd.setCursor(0, 0); lcd.print("Google Fail.");
  lcd.setCursor(0, 1); lcd.print("Retrying...");
  delay(3000);
  return false;
}

bool publishToGoogle(String payload) {
  Serial.println("📤 Sending data to Google Sheets...");
  Serial.print("Payload: "); Serial.println(payload);

  if (!client->connected()) {
    Serial.println("⚠️ Not connected. Reconnecting...");
    if (!connectToGoogle()) {
      return false;
    }
  }

  if (client->POST(url, host, payload)) {
    Serial.println("✅ Data published successfully!");
    lcd.setCursor(0, 0); lcd.print("Upload Success");
    return true;
  } else {
    Serial.println("❌ Error publishing data.");
  
    return false;
  }


  Serial.println("Could not connect to Google Sheets.");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Google Fail.");
  lcd.setCursor(0, 1);
  lcd.print("Retrying...");
  delay(5000);
  return false;
}
void setup() {
  Serial.begin(9600);
  delay(1000);
  Serial.println("\nStarting...");
  SPI.begin();
  lcd.init();
  lcd.backlight();
  connectToWiFi();
  if (!connectToGoogle()) {
    ESP.restart();
  }
  mfrc522.PCD_Init();
}
void loop() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi lost! Reconnecting...");
    connectToWiFi();
  }
  if (!client->connected()) {
    Serial.println("Disconnected from Google Sheets. Restarting..");
    if (!connectToGoogle()) {
      ESP.restart();
    }
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Scan your Tag");
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    return;
  }
  Serial.println("Reading RFID...");
  String values = "", data;
  for (byte i = 0; i < total_blocks; i++) {
    ReadDataFromBlock(blocks[i], readBlockData);
    data = String((char*)readBlockData);
    data.trim();
    if (i == 0) {
      student_id = data;
      values = "\"" + data + ",";
    } else {
      values += data + ",";
    }
  }
  values += gate_number + "\"}";
  //pull first name from card
ReadDataFromBlock(blocks[1], readBlockData);  // Read from block 1
String first_name = String((char*)readBlockData);  // Convert to string
first_name.trim();  // Remove extra spaces

  //dan added to refresh rfid
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
  delay(100);  // Small delay before next scan

  String payload = "{\"command\": \"insert_row\", \"sheet_name\": \"Sheet1\", \"values\": " + values;
  Serial.println("Publishing data...");
  Serial.println(payload);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Publishing...");

  if (client->POST(url, host, payload)) {
    Serial.println("[OK] Data published.");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Resident ID: " + student_id);
    lcd.setCursor(0, 1);
    lcd.print(first_name);
  } else {
    Serial.println("Error publishing data.");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Failed.");
    lcd.setCursor(0, 1);
    lcd.print("Try Again.");
  }
  delay(5000);
}
void ReadDataFromBlock(int blockNum, byte readBlockData[]) {
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }
  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
  readBlockData[16] = ' ';
  readBlockData[17] = ' ';
  Serial.println("Block read successfully.");
}

